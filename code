import threading
import time
import queue

# Task Scheduler
class IoTScheduler:
    def __init__(self):
        self.task_queue = queue.PriorityQueue()
        self.running = True
        threading.Thread(target=self.run, daemon=True).start()

    def add_task(self, priority, task, *args):
        self.task_queue.put((priority, task, args))

    def run(self):
        while self.running:
            if not self.task_queue.empty():
                _, task, args = self.task_queue.get()
                task(*args)
            time.sleep(0.1)

# Power Manager
class PowerManager:
    def __init__(self, threshold=10):
        self.battery = 100
        self.threshold = threshold

    def consume_power(self, amount):
        self.battery -= amount
        if self.battery < self.threshold:
            print("Entering low power mode...")

# Data Synchronizer
class DataSynchronizer:
    def __init__(self):
        self.data = {}
        self.lock = threading.Lock()

    def update_data(self, key, value):
        with self.lock:
            self.data[key] = value
            print(f"Data updated: {key} -> {value}")

# Example Usage
def sample_task(name):
    print(f"Executing task: {name}")

scheduler = IoTScheduler()
power_manager = PowerManager()
data_sync = DataSynchronizer()

scheduler.add_task(1, sample_task, "Sensor Read")
scheduler.add_task(2, sample_task, "Data Transmission")

time.sleep(1)  # Allow tasks to run
power_manager.consume_power(20)
data_sync.update_data("temperature", "22C")
